project(mpc-walkgen)
find_package(qibuild)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/modules")
set(LSSOL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/modules")
INCLUDE_DIRECTORIES(BEFORE ${PROJECT_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(BEFORE ${PROJECT_SOURCE_DIR}/include-private)
INCLUDE_DIRECTORIES(BEFORE ${PROJECT_SOURCE_DIR}/src)
INCLUDE_DIRECTORIES(BEFORE ${CMAKE_BINARY_DIR}/include)

qi_add_optional_package(LSSOL)
qi_add_optional_package(QPOASES)

# Ensure at least one solver is found

if(NOT WITH_LSSOL  AND NOT WITH_QPOASES)
  qi_error("No QP solver has been found. One needs either LSSOL or qpOASES")
endif()

set(QPSOLVERS "LSSOL;QPOASES")
foreach(QPSOLVER ${QPSOLVERS})
  if(WITH_${QPSOLVER})
    ADD_DEFINITIONS("-DUSE_${QPSOLVER}")
    set(${QPSOLVER}_FOUND ON)
  else()
    # the case might occur where LSSOL is found but we do not want to use it.
    # In such a case, WITH_LSSOL is false and LSSOL_FOUND is true.
    # as jrl-cmake does not know about WITH_LSSOL but does test LSSOL_FOUND
    # we unset the latter to get the correct behaviour.
    set(${QPSOLVER}_FOUND OFF)
  endif()
endforeach()

# get the sources and correct their path
include(src/SourcesLib.cmake)
foreach(src ${mpc-walkgen_SRC})
  list(APPEND SOURCES "src/${src}")
endforeach(src)

# get the private headers and correct their path
include(include-private/SourcesLib.cmake)
foreach(inc ${mpc-walkgen_INCL_PRIVATE})
  list(APPEND SOURCES "include-private/${inc}")
endforeach(inc)

# get the headers
SET(HEADERS
 include/mpc-walkgen/sharedpgtypes.h
 include/mpc-walkgen/walkgen-abstract.h
 ${CMAKE_BINARY_DIR}/include/mpc-walkgen/solvers.h
 )

qi_create_lib(mpc-walkgen SRC "${SOURCES}" "${HEADERS}" "${HEADERS_PRIVATE}")
if(WITH_LSSOL)
  qi_use_lib(mpc-walkgen lssol)
  target_link_libraries(mpc-walkgen gfortran)
endif()
if(WITH_QPOASES)
  qi_use_lib(mpc-walkgen qpoases)
endif()
qi_use_lib(mpc-walkgen boost eigen3)
qi_stage_lib(mpc-walkgen INCLUDE_DIRS include/mpc-walkgen)

# Define subdirectories to explore for cmake
ADD_SUBDIRECTORY(include)

ADD_SUBDIRECTORY(unittest)

# Add a simple test:
enable_testing()
