project(mpc-walkgen)
find_package(qibuild)


list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/modules")
INCLUDE_DIRECTORIES(BEFORE ${PROJECT_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(BEFORE ${PROJECT_SOURCE_DIR}/include-private)
INCLUDE_DIRECTORIES(BEFORE ${PROJECT_SOURCE_DIR}/src)

# get the private headers and correct their path
include(include-private/SourcesLib.cmake)
foreach(inc ${mpc-walkgen_INCL_PRIVATE}
  list(APPEND SOURCES "include-private/${inc}")
endforeach(src)

# get the sources and correct their path
include(src/SourcesLib.cmake)
foreach(src ${mpc-walkgen_SRC}
  list(APPEND SOURCES "src/${src}")
endforeach(src)

# get the headers
SET(HEADERS
 include/mpc-walkgen/sharedpgtypes.h
 include/mpc-walkgen/walkgen-abstract.h
 ${CMAKE_BINARY_DIR}/include/mpc-walkgen/solvers.h
 )

# Assuming that both solvers have been found.
ADD_DEFINITIONS("-DUSE_LSSOL")
ADD_DEFINITIONS("-DUSE_QPOASES")

set_source_files_properties(src/walkgen/walkgen.cpp src/walkgen/qp-generator.cpp
        PROPERTIES
        COMPILE_FLAGS -DUSE_QPOASES)

qi_create_lib(mpc-walkgen SRC "${SOURCES}" "${HEADERS}" "${HEADERS_PRIVATE}")
qi_use_lib(mpc-walkgen lssol)
target_link_libraries(mpc-walkgen gfortran)
qi_use_lib(mpc-walkgen qpoases)
qi_use_lib(mpc-walkgen boost)
qi_use_lib(mpc-walkgen eigen3)
qi_stage_lib(mpc-walkgen INCLUDE_DIRS include/mpc-walkgen)

# Define subdirectories to explore for cmake
ADD_SUBDIRECTORY(include)
ADD_SUBDIRECTORY(unittest)

# Add a simple test:
enable_testing()

