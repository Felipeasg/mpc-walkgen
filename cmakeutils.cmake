# find_optional_package: set a WITH_FOO option if FOO_PACKAGE is found.
#
# if the foo package is found, WITH_FOO will automatically be set to true.
# however, there are a few cases where you would like to NOT use the
# features of the FOO library even if it is found, in this case, we let
# the user set -DWITH_FOO=OFF from the command line.
#
function(find_optional_package name)
  set(_desc "${ARGN}")
  string(TOUPPER "${name}" _U_name)
  # if already set by user to OFF, do nothing:
  if(NOT DEFINED "WITH_${_U_name}" OR WITH_${_U_name})
    # else, set the value of the option using the
    # result of find_package
    find_package("${name}")
    if(${_U_name}_FOUND)
      set("WITH_${_U_name}" ON CACHE BOOL "${_desc}" FORCE)
    else()
      set("WITH_${_U_name}" OFF CACHE BOOL "${_desc}" FORCE)
    endif()
  endif()
endfunction()

# create_test: create an executable and declare it as a test.
#
# create_test(name
#   SRC src0.cpp src1.cpp
#   INTDEPS intdep0 intdep1
#   EXTDEPS extdep0 extdep1
#   ARGUMENTS arg0 arg1)
#
# - name the name of the test and the target
# - SRC: sources of the test
# - INTDEPS: internal dependencies of the test (cmake targets)
# - EXTDEPS: external dependencies of the test (libraries)
# - ARGUMENTS: arguments to be passed to the executable
#
function(create_test name)
  cmake_parse_arguments(ARG "" "" "SRC;INTDEPS;EXTDEPS;ARGUMENTS" ${ARGN})

  # create the test target
  add_executable(${name} ${ARG_SRC} ${ARG_UNPARSED_ARGUMENTS})

  #handle dependencies
  foreach(dep ${ARG_INTDEPS})
    add_dependencies(${name} ${dep})
  endforeach()
  target_link_libraries(${name} ${ARG_INTDEPS})
  foreach(dep ${ARG_EXTDEPS})
    PKG_CONFIG_USE_DEPENDENCY(${name} ${dep})
  endforeach()

  # avoid the Debug/Release subdirs in VS, so that we can find the executable
  if(DEFINED QI_SDK_DIR)
    set(_output_directory "${QI_SDK_DIR}/bin")
  else()
    set(_output_directory "${CMAKE_CURRENT_BINARY_DIR}")
  endif()
  set_target_properties("${name}" PROPERTIES
      RUNTIME_OUTPUT_DIRECTORY_DEBUG   "${_output_directory}"
      RUNTIME_OUTPUT_DIRECTORY_RELEASE "${_output_directory}"
      RUNTIME_OUTPUT_DIRECTORY         "${_output_directory}"
  )
  # Now that all configs end up in the same directory, we need to avoid name
  # clashes
  if(MSVC)
    # always postfix debug lib/bin with _d ...
    set_target_properties("${name}" PROPERTIES DEBUG_POSTFIX "_d")
  endif()

  set(_exec_path ${_output_directory}/${name})
  if(MSVC AND "${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    set(_exec_path ${_exec_path}_d)
  endif()

  # add the test
  add_test(${name} "${_exec_path}" ${ARG_ARGUMENTS})
endfunction()


function(qibuildize name)
  set(_runtime_out ${QI_SDK_DIR}/${QI_SDK_BIN})
  set(_lib_out ${QI_SDK_DIR}/${QI_SDK_LIB})
  set_target_properties("${name}" PROPERTIES
      RUNTIME_OUTPUT_DIRECTORY_DEBUG    "${_runtime_out}"
      RUNTIME_OUTPUT_DIRECTORY_RELEASE  "${_runtime_out}"
      RUNTIME_OUTPUT_DIRECTORY          "${_runtime_out}"
      LIBRARY_OUTPUT_DIRECTORY_DEBUG    "${_lib_out}"
      LIBRARY_OUTPUT_DIRECTORY_RELEASE  "${_lib_out}"
      LIBRARY_OUTPUT_DIRECTORY          "${_lib_out}"
      ARCHIVE_OUTPUT_DIRECTORY_DEBUG    "${_lib_out}"
      ARCHIVE_OUTPUT_DIRECTORY_RELEASE  "${_lib_out}"
      ARCHIVE_OUTPUT_DIRECTORY          "${_lib_out}"
  )
  if(MSVC)
    # always postfix debug lib/bin with _d ...
    set_target_properties("${name}" PROPERTIES DEBUG_POSTFIX "_d")
  endif()
endfunction()

function(gen_mpc_config)

  # Generate a mpc-walkgen-config.cmake for qibuild

  # Compute MPC_WALKGEN_DEPENDS
  set(_mpc_deps)
  if(WITH_LSSOL)
    list(APPEND _mpc_deps "LSSOL")
  endif()
  if(WITH_QPOASES)
    list(APPEND _mpc_deps "QPOASES")
  endif()

  # Compute MPC_WALKGEN_LIBRARIES
  if(WIN32)
    set(_mpc_libs
      debug       "${QI_SDK_DIR}/${QI_SDK_LIB}/mpc-walkgen_d.lib"
      optimized   "${QI_SDK_DIR}/${QI_SDK_LIB}/mpc-walkgen.lib"
    )
  elseif(APPLE)
      set(_mpc_libs "${QI_SDK_DIR}/${QI_SDK_LIB}/libmpc-walkgen.dylib")
  else()
      set(_mpc_libs "${QI_SDK_DIR}/${QI_SDK_LIB}/libmpc-walkgen.so")
  endif()

  # Compute MPC_WALKGEN_INCLUDE_DIRS
  get_directory_property(_mpc_inc INCLUDE_DIRECTORIES)

  set(_code "# Autogenerated file. Do not edit.

set(MPC_WALKGEN_LIBRARIES \"${_mpc_libs}\" CACHE INTERNAL \"\" FORCE)
set(MPC_WALKGEN_INCLUDE_DIRS ${_mpc_inc} CACHE INTERNAL \"\" FORCE)
set(MPC_WALKGEN_DEPENDS ${_mpc_deps} CACHE INTERNAL \"\" FORCE)
set(MPC_WALKGEN_PACKAGE_FOUND TRUE CACHE INTERNAL \"\" FORCE)
"
)
  set(_mpc_config "${QI_SDK_DIR}/${QI_SDK_CMAKE_MODULES}/mpc_walkgen-config.cmake")
  file(WRITE ${_mpc_config} "${_code}")

endfunction()
